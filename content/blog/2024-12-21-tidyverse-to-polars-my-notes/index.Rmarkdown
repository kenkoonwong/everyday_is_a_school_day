---
title: "Tidyverse \U0001FA90to Polars \U0001F43B‚Äç‚ùÑÔ∏è: My Notes"
author: Ken Koon Wong
date: '2024-12-21'
slug: polars
categories: 
- r
- R
- polars
- notes
tags: 
- r
- R
- polars
- notes
excerpt: "I found `Polars` syntax is quite similar to `dplyr`. And the way that we can chain the functions makes it even more familiar! It was fun learning the nuances, now it's time to put them into practice! Wish me luck! üçÄ"
---

> I found `Polars` syntax is quite similar to `dplyr`. And the way that we can chain the functions makes it even more familiar! It was fun learning the nuances, now it's time to put them into practice! Wish me luck! üçÄ

## Motivation
In preparation for using more Python in 2025 and also to speak more of the same language with our datathon team, I've decided to practice `Polars` in Python thinking in R first. Below is my notes to myself, hopefully I'll be able to refer back and improve this more as I use more of this for the next month. Wish me luck! 

![](polars.png)

## Objectives 
- [Create A Dataframe](#data)
- [Filter, Select, Summarize, Across](#basic)
- [Mutate, Paste](#basic2)
- [Extract](#basic3)
- [Case_when](#basic4)
- [Join / Merge](#join)
- [To Dummies/Pivot/Unpivot](#pivot)
- [Helpful Resources](#resource)
- [Lessons Learnt](#lessons)



## Create A Dataframe {#data}
#### Tidyverse
```{r, message=F, warning=F}
library(tidyverse)
library(reticulate)
use_virtualenv('/Users/kenkoonwong/mac-positron-python/.venv/')

df <- tibble(
  name = c("Alice", "Bob", "Charlie", "Ken", "Steven", "Carlos"),
  age = c(30, 25, 35, 50, 60, 58),
  city = c("New York", "San Francisco", "Tokyo", "Toronto", "Lima", "Cleveland"),
  address = c("123 Main St, Ontario, OH", "123 Main St, Calgary, AB", "456-7890, Tokyo, NY",
              "49494 Exchange St, Toronto, ON", "1010 Gb st, Lima, OH", "666 Heaven dr, Cleveland, OH"),
  phone_number = c("123-456-7890", "987-654-3210", "098-765-4332", "111-232-4141", 
                  "505-402-6060", "909-435-1000"),
  email = c("alice@example.com", "bob@example.com", "charlie@example.com", 
            "ken@stats.org", "stephencurry@nba.com", "carlos@genius.edu"),
  salary = c(50000, 45000, 60000, 20000, 40000, 30000),
  department = c("Engineering", "Marketing", "Finance", "Marketing", "Marketing", "Finance"),
  hire_date = c("2010-01-01", "2012-05-15", "2015-10-01", "2010-04-01", 
                "2009-10-30", "2005-11-12"),
  status = c("Active", "Inactive", "Active", "Inactive", "Active", "Active"),
  salary_increase_percentage = c(10, 5, 15, 10, 10, 5),
  years_of_service = c(5, 3, 7, 10, 10, 12),
  bonus_amount = c(2000, 1500, 3000, 5000, 3000, 2000),
  performance_rating = c(4, 3, 5, 5, 4, 4),
  performance_reviews_count = c(2, 1, 3, 3, 4, 5),
  performance_reviews_last_updated = c("2022-05-01", "2021-07-15", "2022-08-31",
                                     "2024-10-30", "2023-01-02", "2024-12-12")
)
```

#### Polars
```{python, eval=T}
import polars as pl

df = pl.DataFrame({
    "name": ["Alice", "Bob", "Charlie","Ken","Steven","Carlos"],
    "age": [30, 25, 35, 50, 60, 58],
    "city": ["New York", "San Francisco", "Tokyo","Toronto","Lima","Cleveland"],
    "address" : ["123 Main St, Ontario, OH","123 Main St, Calgary, AB", "456-7890, Tokyo, NY","49494 Exchange St, Toronto, ON","1010 Gb st, Lima, OH","666 Heaven dr, Cleveland, OH"],
    "phone_number" : ["123-456-7890", "987-654-3210", "098-765-4332","111-232-4141","505-402-6060","909-435-1000"],
    "email" : ["alice@example.com", "bob@example.com", "charlie@example.com","ken@stats.org","stephencurry@nba.com","carlos@genius.edu"],
    "salary" : [50000, 45000, 60000,20000,40000,30000],
    "department" : ["Engineering", "Marketing", "Finance","Marketing","Marketing","Finance"],
    "hire_date" : ["2010-01-01", "2012-05-15", "2015-10-01", "2010-04-01","2009-10-30","2005-11-12"],
    "status" : ["Active", "Inactive", "Active","Inactive","Active","Active"],
    "salary_increase_percentage" : [10, 5, 15,10,10,5],
    "years_of_service" : [5, 3, 7,10,10,12],
    "bonus_amount" : [2000, 1500, 3000,5000,3000,2000],
    "performance_rating" : [4, 3, 5, 5, 4, 4],
    "performance_reviews_count" : [2, 1, 3, 3, 4, 5],
    "performance_reviews_last_updated" : ["2022-05-01", "2021-07-15", "2022-08-31", "2024-10-30","2023-01-02","2024-12-12"]
})

```

## Filter, Select, Summarize, Across {#basic}

- Filter records where age is greater and equal to 30
- return columns with name:address, and columns that starts with performance* and salary*
- return mean of values across all numeric data

#### Tidyverse
```{r}
df |>
  filter(age >= 30) |>
  select(1:3, starts_with("performance"), starts_with("salary")) |> 
  summarize(across(.cols = where(is.numeric), .fns = mean, .names = "mean_{.col}"))
```


#### Polars
```{python}
df \
    .filter(pl.col('age') >= 30) \
    .select(df.columns[0:4]+['^performance.*$','^salary.*$']) \
    .select(pl.col(pl.Int64).mean().name.prefix('mean_'))
```

For some reason, for the regex above, I have to use `^` and `$` sandwiched to return those column nams that I want to include. bizzare. 


## Mutate, Paste {#basic2}
Test 1
- make a new column called `combination_of_character` 
- paste all columns with character datatype separated by ` `, a space
- select the created column

#### Tidyverse
```{r}
df |>
  rowwise() |>
  transmute(combination_of_character = paste(
      across(where(is.character)), 
      collapse = " "
    )) |>
  select(combination_of_character)
```

#### Polars
```{python}
df \
    .with_columns(
        pl.concat_str(
            pl.col(pl.String), separator=" "
        ).alias('combination_of_character')
    ) \
    .select(pl.col('combination_of_character'))
```

#### Tidyverse
Test 2
- make a new column called `age_salary`
- glue column `age` and `salary` together with `-` between
- select columns `name` and `age_salary`

```{r}
df |> 
  mutate(age_salary = paste0(age, "-", salary)) |>
  select(name, age_salary)
```


#### Polars
```{python}
df \
    .with_columns(
        age_salary=pl.format('{}-{}',pl.col('age'),pl.col('salary'))
    ) \
    .select(pl.col('name','age_salary'))
```

If it's just 1 column, you can use this format `age_salary=` to name the column, otherwise you'd have to use `alias` to name it if there are multple columns

## Extract {#basic3}
- create a new column `area_code_and_salary` 
- paste street number (extract it from `address`) with a space and the the column `salary`
- select `area_code_and_salary`

#### Tidyverse
```{r}
df |>
  mutate(area_code_and_salary = paste0(str_extract(address, "\\d{0,5}"), " ", salary)) |>
  select(area_code_and_salary)
```

#### Polars 
```{python}
df \
    .select(
        pl.concat_str(
            pl.col('address').str.extract(r'^(\d{0,5})'),
            pl.lit(" "),
            pl.col('salary')
        ).alias('area_code_and_salary')
    )
```

Have to use `pl.lit(' ')` for any constant string

## Case_when {#basic4}
Test 1
- create a new column called `familiarity`
- if `address` contains `OH`, then return `local`
- if `address` contains `NY`, then return `foodie`
- otherwise return `elsewhere`

#### Tidyverse
```{r}
df |>
  mutate(familiarity = case_when(
    str_detect(address, "OH") ~ "local",
    str_detect(address, "NY") ~ "foodie",
    TRUE ~ "elsewhere"
  )) 

```

#### Polars 
```{python}
df \
    .with_columns([  
        pl.when(pl.col('address').str.contains('OH'))
        .then(pl.lit('local'))
        .when(pl.col('address').str.contains('NY'))
        .then(pl.lit('foodie'))
        .otherwise(pl.lit('elsewhere'))
        .alias('familiarity')
    ])
```

Test 2
- convert `name` data to lowercase
- create new column called `email_name` and extract `email` before the `@` 
- select columns that starts with `name` or end with `name`
- create a new column called `same?`
  - if `name` and `email_name` is the same, then return `yes`
  - otherwise return `no`
  
#### Tidyverse
```{r}
df |>
  mutate(
    name = tolower(name),
    email_name = str_extract(email, "^([\\d\\w]+)@", group = 1)
  ) |>
  select(starts_with("name") | ends_with("name")) |>
  mutate(`same?` = case_when(
    name == email_name ~ "yes",
    TRUE ~ "no"))
```


#### Polars
```{python}
df \
    .with_columns(
        [
        pl.col('name').str.to_lowercase(),    
        pl.col('email').str.extract(r'^([\d\w]+)@', group_index = 1)
        .alias('email_name')
        ]
    ) \
    .select([
        pl.col('^name|.*name$'),
        pl.when(
            pl.col('name') == pl.col('email_name')).then(pl.lit('yes'))
            .otherwise(pl.lit('no'))
            .alias('same?')
    ]
        )
```

Learnt that apparently we cannot use `look forward or backward` in polars. Such as `.*(?=@)` to capture the `email_name`

## Group_by, Shift, Forward_Fill {#basic5}
- group by `department` column
- summarize by selecting `name`, new column `salary_shift` with conditions:
  - if the department only has 1 row of `salary` data, do not `shift` salary
  - if the department has more than 1 row of `salary` data, `shift by -1` of salary column
  - reason: there was a mistake in entering data for those with more than 1 row of data, apparently the actualy salary data is 1 row more 
- then forward fill the `salary_shift` with the number prior in the same group
  
#### Tidyverse
```{r}
df |>
  group_by(department) |>
  summarize(
    name = name,
    salary_shift = case_when(
      n() == 1 ~ salary,
      TRUE ~ lead(salary)
    )
  ) |>
 fill(salary_shift, .direction = "down")

```

#### Polars
```{python}
df \
.group_by('department') \
.agg(
    pl.col('name'),
    pl.when(pl.col('salary').len()==1).then(pl.col('salary'))
    .otherwise(pl.col('salary').shift(-1))
    .alias('salary_shift')) \
.explode('name','salary_shift') \
.with_columns(
    pl.col('salary_shift').forward_fill())
```    
    
Apparently polars would turn the column into a nested dataframe (list) when grouped and can't do `fill` when it's in list? will have to `unnest` by `explode` before `fill` can be used. Unless of coure if you merge the `fill` in the same line when shifting, such as 

```
df \
.group_by('department') \
.agg(
    pl.col('name'),
    pl.when(pl.col('salary').len()==1).then(pl.col('salary'))
    .otherwise(pl.col('salary').shift(-1))
    .forward_fill() 
    .alias('salary_shift'))
```

#### Is There An Easier Way to `Unnest` without Typing ALL of the columns in Polars?  
Yes! I believe `pl.col, pl.select, pl.filter` all take a list of conditions. First create a list of columns you want to unnest, then use `pl.col` to select them. 
    
```{python}
dt = [pl.List(pl.Int64),pl.List(pl.String)]

df \
    .group_by('department', maintain_order=True) \
    .agg(  
        pl.col('name'),
        pl.col('salary_increase_percentage'),
        salary_shift = pl.when(pl.col('salary').count() == 1)  
            .then(pl.col('salary'))
            .otherwise(pl.col('salary').shift(-1))
    ) \
    .explode(pl.col(dt)) \
    .with_columns(
        pl.col('salary_shift').forward_fill()
    ) \
    .with_columns(
        new_raise = pl.col('salary_shift') * (1+pl.col('salary_increase_percentage')/100)
    )
```

## Merge / Join {#join}
- Create another mock data with dataframe called `df_dept` with columns `department` and `dept_id`

#### Tidyverse
```{r}
df_dept <- tibble(
  department = c("Engineering", "Marketing", "Finance"),
  dept_id = c(30, 25, 20)
)
```

#### Polars
```{python}
df_dept = pl.DataFrame({
    "department": ["Engineering", "Marketing", "Finance"],
    "dept_id": [30, 25, 20]
})
```

- left_join `df` with `df_dept`
- create new column `employee_id` by pasting:
  - {dept_id}-{random 7 digit numbers}

#### Tidyverse
```{r}
df |>
  left_join(df_dept, by = "department") |>
  select(name, dept_id) |>
  mutate(employee_id = map_chr(dept_id, ~paste0(.x, "-", sample(1000000:9999999, 1))))

```

#### Polars
```{python}
import random

df \
    .join(df_dept, on="department") \
    .select(['name','dept_id']) \
    .with_columns(
        employee_id = pl.format(
          '{}-{}',
          'dept_id',
          pl.Series([
            random.randint(100000, 999999) for _ in range(len(df))
            ])
            )
    )
```

there is a function called `map_elements` in polars but the documentation stated that it's inefficient, essentially using a for loop. I'm not entirely certain if list comprehension above is any more efficient. Another probably more efficent way of doing this is 2 separate process. The random number generation on another dataframe, then merge it. 

## To Dummies, Pivot_longer / Pivot_wider
- create dummy variables for `department` using `name` as index or id

#### Tidyverse
```{r}
df |>
  select(name, department) |>
  pivot_wider(id_cols = "name", names_from = "department", values_from = "department", values_fill = 0, values_fn = length, names_prefix = "department_")


```

#### Polars - `to_dummies`
```{python}
df \
    .select(['name','department']) \
    .to_dummies(columns = 'department') 
```

#### Polars - `pivot`
```{python}
df \
    .select(['name','address']) \
    .with_columns(
        state = pl.col('address').str.extract(r'([A-Z]{2})$')
    ) \
    .select('name','state') \
    .pivot(on = 'state', index = 'name', values='state', aggregate_function='len') \
    .with_columns(
        pl.col(pl.UInt32).fill_null(0)
    ) 
```

Essentially, `pivot_wider` is Polars' `pivot`. Whereas `pivot_longer` is Polars' `unpivot`

## Helpful Resources {#resource}
- [Polars Python API documentation](https://docs.pola.rs/api/python/stable/reference/index.html)
- [Cheat sheet](https://franzdiebold.github.io/polars-cheat-sheet/Polars_cheat_sheet.pdf)
- [cookbook Polars for R](https://ddotta.github.io/cookbook-rpolars/)


## Lessons Learnt:
- `stringr::str_extract` has the parameter `group`
- We cannot use `look forward or backward` in polars
- `polars` also has `selector` for looking at `column names` more efficiently
- lots of trial and error
- going to try doing pure `Polars` for a month! Wish me luck!




If you like this article:
- please feel free to send me a [comment or visit my other blogs](https://www.kenkoonwong.com/blog/)
- please feel free to follow me on [BlueSky](https://bsky.app/profile/kenkoonwong.bsky.social), [twitter](https://twitter.com/kenkoonwong/), [GitHub](https://github.com/kenkoonwong/) or [Mastodon](https://med-mastodon.com/@kenkoonwong)
- if you would like collaborate please feel free to [contact me](https://www.kenkoonwong.com/contact/)

